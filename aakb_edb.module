<?php

/**
 * @file
 * Defines the exports.
 */

/**
 * Implements hook_menu().
 */
function aakb_edb_menu() {
  $items = array();

  $items['feeds/eventdb'] = array(
    'title' => 'Events',
    'type' => MENU_CALLBACK,
    'page callback' => 'aakb_edb_feed',
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Build JSON feed with current events.
 */
function aakb_edb_feed() {
  module_load_include('inc', 'ding_pretix', 'ding_pretix.api_module');

  $events = array();

  $cache = cache_get('aakb_edb_events', 'cache');
  if ($cache && time() < $cache->expire) {
    $events = $cache->data;
  }
  else {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'ding_event')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_ding_event_date', 'value', strtotime("midnight", time()), '>=');

    $result = $query->execute();
    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
      $nodes = entity_load('node', $nids);

      foreach ($nodes as $node) {
        $wrapper = entity_metadata_wrapper('node', $node);

        $tags = array();
        $tagObjects = $wrapper->field_ding_event_tags->value();
        foreach ($tagObjects as $tag) {
          $tags[] = $tag->name;
        }

        $groups = [];
        $groupObjects = $wrapper->ding_event_groups_ref->value();
        foreach ($groupObjects as $group) {
          $groups[] = array(
            'nid' => $group->nid,
            'title' => $group->title,
            'link' => url('node/' . $group->nid, array(
              'absolute' => TRUE,
            )),
          );
        }

        $timezone = $wrapper->field_ding_event_date->value()['timezone_db'];
        $dt = new DateTime($wrapper->field_ding_event_date->value()['value'], new DateTimeZone($timezone));
        $start = $dt->format('c');
        $dt = new DateTime($wrapper->field_ding_event_date->value()['value2'], new DateTimeZone($timezone));
        $stop = $dt->format('c');

        $og_group = $wrapper->og_group_ref->value();
        $og_group = $og_group ? reset($og_group) : $og_group;

        try {
          $group_wrapper = entity_metadata_wrapper('node', $og_group);
        }
        catch (EntityMetadataWrapperException $e) {
          // Not connected to a library.
        }

        try {
          $address = $group_wrapper->field_ding_library_addresse->value();
          $location = array(
            'hint' => $wrapper->field_ding_event_location->value()['name_line'],
            'thoroughfare' => $address['thoroughfare'],
            'postal_code' => $address['postal_code'],
            'locality' => $address['locality'],
            'mail' => $group_wrapper->field_ding_library_mail->value(),
            'phone' => $group_wrapper->field_ding_library_phone_number->value(),
            'name' => $group_wrapper->title->value(),
          );
        }
        catch (EntityMetadataWrapperException $e) {
          $location = array();
        }

        try {
          $geo = $group_wrapper->field_ding_library_geocode->value();
          $location['coordinates'] = array(
            'lat' => $geo['lat'],
            'lon' => $geo['lon'],
          );
        }
        catch (EntityMetadataWrapperException $e) {
          // Don't do anything.
        }

        $tickets = array();
        $external_ticket = $wrapper->field_ding_event_ticket_link->value();
        if (isset($external_ticket)) {
          $tickets['url'] = $external_ticket['url'];
        }
        else {
          $pretix_url = ding_pretix_get_shop_url($node->nid);
          if($pretix_url) {
            $tickets['url'] = $pretix_url;
          }
        }

        $lead_wrapper = $wrapper->field_ding_event_lead->value();
        $body_wrapper = $wrapper->field_ding_event_body->value();

        $lead = $lead_wrapper['safe_value'] ?? $lead_wrapper;
        $body = $body_wrapper['safe_value'] ?? '';

        // 'Det Sker i Aarhus' data model has no 'lead' concept so we have to merge 'lead' and 'body'.
        $description = $lead ? '<p><strong>'. $lead .'</strong></p>' . $body : $body;

        $organizers = array();
        try {
          $organizers_terms = $wrapper->field_ding_event_organizer->value();
          foreach ($organizers_terms as $term) {
            $organizers[] = $term->name;
          }
        }
        catch (EntityMetadataWrapperException $e) {
          // Don't do anything.
        }

        $events[] = array(
          'nid' => $node->nid,
          'url' => url('node/' . $node->nid, array(
            'absolute' => TRUE,
          )),
          'title' => $node->title,
          'language' => $node->language,
          'changed' => date('c', $node->changed),
          'categories' => $wrapper->field_ding_event_category->value()->name,
          'tags' => $tags,
          'groups' => $groups,
          'lead' => $lead,
          'body' => $description,
          'date' => array(
            'start' => $start,
            'stop' => $stop,
          ),
          'images' => array(
            'list' => $wrapper->field_ding_event_list_image->value() ? file_create_url($wrapper->field_ding_event_list_image->value()['uri']) : '',
            'title' => $wrapper->field_ding_event_title_image->value() ? file_create_url($wrapper->field_ding_event_title_image->value()['uri']) : '',
          ),
          'location' => $location,
          'price' => $wrapper->field_ding_event_price->value() ?? 0,
          'targets' => $wrapper->field_ding_event_target->value() ?? '',
          'unpublish_on' => isset($node->unpublish_on) ? date('c', $node->unpublish_on) : 0,
          'organizer' => $organizers,
          'tickets' => $tickets,
        );
      }
    }

    // Store the result in cache for an hour.
    cache_set('aakb_edb_events', $events, 'cache', REQUEST_TIME + 3600);
  }

  drupal_json_output($events);
}
